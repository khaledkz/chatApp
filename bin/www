#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('todayprac:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
// add sockiet io
var io = require('socket.io')(server);
var connectionslen = [];
var users=[];
  io.on('connection',function (socket) {
      connectionslen.push(socket);
         console.log('connect %s '+connectionslen.length);
     socket.on('disconnect',function () {
         users.splice(users.indexOf(socket));

         connectionslen.splice(connectionslen.indexOf(socket));
         console.log('disconnect %s '+connectionslen.length);
     });
     socket.on('userSendMsg2Server',function (msg) {
          io.emit('SerRecThenSend2User',msg);
     });
      socket.on('user typing msg',function (msg) {
          socket.broadcast.emit('serSendTypingmsg2user',msg);
       });
      socket.on('add User name to server',function (data) {
              if(users.indexOf(data)!==-1){
                 console.log('-ve')

            }else{
                console.log(data)
                users.push(data);
                socket.emit('serverSendUser2page',data);
                // console.log(users)
                updateUser(users);
            }

       });

      function updateUser(users){
          io.emit('update user ser2page',users);

      }


  });